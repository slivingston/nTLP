#!/usr/bin/env python
"""
In addition to custom regression tests, which are implemented by
individual functions within this module, regression tests are also
generated based on files or directories found in the directory
tests/regression.  E.g., the directory

  tests/regression/robot_simple

contains a file called OUTPUT.txt that provides exactly the terminal
output expected from running examples/robot_simple.py, given that
INPUT.txt is piped to its stdin.  That directory also contains any
files that should be generated by examples/robot_simple.py, e.g.,
robot_simple.spc  (Files not provided under tests/regression/robot_simple
are not checked.)

Alternatively, e.g., the files

  tests/regression/robot_simple_INPUT.txt
  tests/regression/robot_simple_OUTPUT.txt

result in comparing the output of examples/robot_simple.py given
robot_simple_OUTPUT.txt against robot_simple_INPUT.txt.  Finally, the
directory structure under tests/regression matches that of examples/;
e.g., regression testing with examples/gridworld/solverand.py is
achieved with tests/regression/gridworld/solverand_INPUT.txt, etc.

N.B., the environment variable TULIP_REGRESS is set to "1" before
invoking scripts.  This allows children to run in "regression mode",
e.g., to seed random number generators with a known constant.


SCL; 21 Jan 2014.
"""

import os
import os.path
import subprocess
import tempfile

regression_env = os.environ.copy()

# Request that client scripts run in "regression mode";
# e.g., seed random number generators with a known constant.
regression_env["TULIP_REGRESS"] = "1"

# Ensure that the appropriate tulip is imported, whether local, etc.
# Consult run_tests.py , including its --outofsource option
import tulip
regression_env["PYTHONPATH"] = os.path.abspath(os.path.join(os.path.dirname(tulip.__file__), os.pardir))+":"+regression_env["PYTHONPATH"]

# Use full path to directory of regression files (called "tests/regression"
# in the docstring above).  This facilitates more variants of test execution.
tests_dir = os.path.abspath(os.path.dirname(__file__))
regression_dir = os.path.join(tests_dir, "regression")
examples_dir = os.path.join(tests_dir, os.pardir, "examples")


def auto_regression_filecheck(basename):
    actual_out = tempfile.TemporaryFile()
    import tulip
    print tulip.__file__
    with open(os.path.join(regression_dir, basename)+"_INPUT.txt", "r") as f_in:
        subprocess.call(["python", os.path.join(examples_dir, basename)+".py"], stdin=f_in, stdout=actual_out, stderr=subprocess.STDOUT,
                        env=regression_env)
    actual_out.seek(0)
    with open(os.path.join(regression_dir, basename)+"_OUTPUT.txt", "r") as f_out:
        assert actual_out.read() == f_out.read()
    actual_out.close()

def auto_regression_dircheck(basename):
    actual_out = tempfile.TemporaryFile()
    with open(os.path.join(regression_dir, basename, "INPUT.txt"), "r") as f_in:
        subprocess.call(["python", os.path.join(examples_dir, basename)+".py"], stdin=f_in, stdout=actual_out, stderr=subprocess.STDOUT,
                        env=regression_env)
    actual_out.seek(0)
    with open(os.path.join(regression_dir, basename, "OUTPUT.txt"), "r") as f_out:
        assert actual_out.read() == f_out.read()
    actual_out.close()
    for expected_outfname in os.listdir(os.path.join(regression_dir, basename)):
        if expected_outfname == "OUTPUT.txt" or expected_outfname == "INPUT.txt":
            continue
        assert os.path.exists(expected_outfname)
        with open(os.path.join(regression_dir, basename, expected_outfname)) as expected_outfile:
            with open(os.path.join(tests_dir, expected_outfname)) as actual_outfile:
                assert actual_outfile.read() == expected_outfile.read()

def auto_regression_test():
    for root, dirs, files in os.walk(regression_dir):
        relpath = root[(root.index(regression_dir)+len(regression_dir)+1):]
        for fname in files:
            if fname.endswith("_INPUT.txt"):
                basename = fname[:fname.rindex("_INPUT.txt")]
                yield auto_regression_filecheck, os.path.join(relpath, basename)
            elif fname == "INPUT.txt":
                yield auto_regression_dircheck, relpath
            else:
                continue

auto_regression_test.slow = True
